{
    "choices": [
        {
            "messages": "Here's the Snowflake SQL code to generate the two views for each table in the schema.\n\n### AUDIT_TABLE Views\n\n```sql\n-- AUDIT_TABLE views\nCREATE OR REPLACE VIEW AUDIT_TABLE_duplicate_records AS\nWITH duplicate_records AS (\n  SELECT \n    Job_ID,\n    Job_Type,\n    Status,\n    Start_Time,\n    End_Time,\n    Duration,\n    Details,\n    ROW_NUMBER() OVER (\n      PARTITION BY \n        Job_Type,\n        Status,\n        Start_Time,\n        End_Time,\n        Duration,\n        Details\n      ORDER BY \n        Job_ID\n    ) AS row_num\n  FROM \n    ICEBERG_SCHEMA.AUDIT_TABLE\n)\nSELECT \n  Job_ID,\n  Job_Type,\n  Status,\n  Start_Time,\n  End_Time,\n  Duration,\n  Details\nFROM \n  duplicate_records\nWHERE \n  row_num > 1;\n\nCREATE OR REPLACE VIEW AUDIT_TABLE_clean_view AS\nWITH clean_records AS (\n  SELECT \n    Job_ID,\n    Job_Type,\n    Status,\n    Start_Time,\n    End_Time,\n    Duration,\n    Details,\n    ROW_NUMBER() OVER (\n      PARTITION BY \n        Job_Type,\n        Status,\n        Start_Time,\n        End_Time,\n        Duration,\n        Details\n      ORDER BY \n        Job_ID\n    ) AS row_num\n  FROM \n    ICEBERG_SCHEMA.AUDIT_TABLE\n)\nSELECT \n  Job_ID,\n  Job_Type,\n  Status,\n  Start_Time,\n  End_Time,\n  Duration,\n  Details\nFROM \n  clean_records\nWHERE \n  row_num = 1;\n```\n\n### CUST Views\n\n```sql\n-- CUST views\nCREATE OR REPLACE VIEW CUST_duplicate_records AS\nWITH duplicate_records AS (\n  SELECT \n    INDEX,\n    CUSTOMER_ID,\n    FIRST_NAME,\n    LAST_NAME,\n    COMPANY,\n    CITY,\n    COUNTRY,\n    PHONE_1,\n    PHONE_2,\n    EMAIL,\n    SUBSCRIPTION,\n    WEBSITE,\n    LOAD_DATE,\n    ROW_NUMBER() OVER (\n      PARTITION BY \n        FIRST_NAME,\n        LAST_NAME,\n        COMPANY,\n        CITY,\n        COUNTRY,\n        PHONE_1,\n        PHONE_2,\n        EMAIL,\n        SUBSCRIPTION,\n        WEBSITE\n      ORDER BY \n        INDEX\n    ) AS row_num\n  FROM \n    ICEBERG_SCHEMA.CUST\n)\nSELECT \n  INDEX,\n  CUSTOMER_ID,\n  FIRST_NAME,\n  LAST_NAME,\n  COMPANY,\n  CITY,\n  COUNTRY,\n  PHONE_1,\n  PHONE_2,\n  EMAIL,\n  SUBSCRIPTION,\n  WEBSITE,\n  LOAD_DATE\nFROM \n  duplicate_records\nWHERE \n  row_num > 1;\n\nCREATE OR REPLACE VIEW CUST_clean_view AS\nWITH clean_records AS (\n  SELECT \n    INDEX,\n    CUSTOMER_ID,\n    FIRST_NAME,\n    LAST_NAME,\n    COMPANY,\n    CITY,\n    COUNTRY,\n    PHONE_1,\n    PHONE_2,\n    EMAIL,\n    SUBSCRIPTION,\n    WEBSITE,\n    LOAD_DATE,\n    ROW_NUMBER() OVER (\n      PARTITION BY \n        FIRST_NAME,\n        LAST_NAME,\n        COMPANY,\n        CITY,\n        COUNTRY,\n        PHONE_1,\n        PHONE_2,\n        EMAIL,\n        SUBSCRIPTION,\n        WEBSITE\n      ORDER BY \n        INDEX\n    ) AS row_num\n  FROM \n    ICEBERG_SCHEMA.CUST\n)\nSELECT \n  INDEX,\n  CUSTOMER_ID,\n  FIRST_NAME,\n  LAST_NAME,\n  COMPANY,\n  CITY,\n  COUNTRY,\n  PHONE_1,\n  PHONE_2,\n  EMAIL,\n  SUBSCRIPTION,\n  WEBSITE,\n  LOAD_DATE\nFROM \n  clean_records\nWHERE \n  row_num = 1;\n```\n\n### CUSTOMERS Views\n\n```sql\n-- CUSTOMERS views\nCREATE OR REPLACE VIEW CUSTOMERS_duplicate_records AS\nWITH duplicate_records AS (\n  SELECT \n    CUSTOMER_ID,\n    NAME,\n    EMAIL,\n    PHONE,\n    ADDRESS,\n    LOAD_DATE,\n    ROW_NUMBER() OVER (\n      PARTITION BY \n        NAME,\n        EMAIL,\n        PHONE,\n        ADDRESS\n      ORDER BY \n        CUSTOMER_ID\n    ) AS row_num\n  FROM \n    ICEBERG_SCHEMA.CUSTOMERS\n)\nSELECT \n  CUSTOMER_ID,\n  NAME,\n  EMAIL,\n  PHONE,\n  ADDRESS,\n  LOAD_DATE\nFROM \n  duplicate_records\nWHERE \n  row_num > 1;\n\nCREATE OR REPLACE VIEW CUSTOMERS_clean_view AS\nWITH clean_records AS (\n  SELECT \n    CUSTOMER_ID,\n    NAME,\n    EMAIL,\n    PHONE,\n    ADDRESS,\n    LOAD_DATE,\n    ROW_NUMBER() OVER (\n      PARTITION BY \n        NAME,\n        EMAIL,\n        PHONE,\n        ADDRESS\n      ORDER BY \n        CUSTOMER_ID\n    ) AS row_num\n  FROM \n    ICEBERG_SCHEMA.CUSTOMERS\n)\nSELECT \n  CUSTOMER_ID,\n  NAME,\n  EMAIL,\n  PHONE,\n  ADDRESS,\n  LOAD_DATE\nFROM \n  clean_records\nWHERE \n  row_num = 1;\n```\n\n### CUST_DATA Views\n\n```sql\n-- CUST_DATA views\nCREATE OR REPLACE VIEW CUST_DATA_duplicate_records AS\nWITH duplicate_records AS (\n  SELECT \n    INDEX,\n    CUSTOMER_ID,\n    FIRST_NAME,\n    LAST_NAME,\n    COMPANY,\n    CITY,\n    COUNTRY,\n    PHONE_1,\n    PHONE_2,\n    EMAIL,\n    SUBSCRIPTION,\n    WEBSITE,\n    LOAD_DATE,\n    ROW_NUMBER() OVER (\n      PARTITION BY \n        FIRST_NAME,\n        LAST_NAME,\n        COMPANY,\n        CITY,\n        COUNTRY,\n        PHONE_1,\n        PHONE_2,\n        EMAIL,\n        SUBSCRIPTION,\n        WEBSITE\n      ORDER BY \n        INDEX\n    ) AS row_num\n  FROM \n    ICEBERG_SCHEMA.CUST_DATA\n)\nSELECT \n  INDEX,\n  CUSTOMER_ID,\n  FIRST_NAME,\n  LAST_NAME,\n  COMPANY,\n  CITY,\n  COUNTRY,\n  PHONE_1,\n  PHONE_2,\n  EMAIL,\n  SUBSCRIPTION,\n  WEBSITE,\n  LOAD_DATE\nFROM \n  duplicate_records\nWHERE \n  row_num > 1;\n\nCREATE OR REPLACE VIEW CUST_DATA_clean_view AS\nWITH clean_records AS (\n  SELECT \n    INDEX,\n    CUSTOMER_ID,\n    FIRST_NAME,\n    LAST_NAME,\n    COMPANY,\n    CITY,\n    COUNTRY,\n    PHONE_1,\n    PHONE_2,\n    EMAIL,\n    SUBSCRIPTION,\n    WEBSITE,\n    LOAD_DATE,\n    ROW_NUMBER() OVER (\n      PARTITION BY \n        FIRST_NAME,\n        LAST_NAME,\n        COMPANY,\n        CITY,\n        COUNTRY,\n        PHONE_1,\n        PHONE_2,\n        EMAIL,\n        SUBSCRIPTION,\n        WEBSITE\n      ORDER BY \n        INDEX\n    ) AS row_num\n  FROM \n    ICEBERG_SCHEMA.CUST_DATA\n)\nSELECT \n  INDEX,\n  CUSTOMER_ID,\n  FIRST_NAME,\n  LAST_NAME,\n  COMPANY,\n  CITY,\n  COUNTRY,\n  PHONE_1,\n  PHONE_2,\n  EMAIL,\n  SUBSCRIPTION,\n  WEBSITE,\n  LOAD_DATE\nFROM \n  clean_records\nWHERE \n  row_num = 1;\n```\n\n### MINING_DATA Views\n\n```sql\n-- MINING_DATA views\nCREATE OR REPLACE VIEW MINING_DATA_duplicate_records AS\nWITH duplicate_records AS (\n  SELECT \n    DATE,\n    -- Add other columns here\n    ROW_NUMBER() OVER (\n      PARTITION BY \n        -- Add other columns here\n      ORDER BY \n        DATE\n    ) AS row_num\n  FROM \n    ICEBERG_SCHEMA.MINING_DATA\n)\nSELECT \n  DATE,\n  -- Add other columns here\nFROM \n  duplicate_records\nWHERE \n  row_num > 1;\n\nCREATE OR REPLACE VIEW MINING_DATA_clean_view AS\nWITH clean_records AS (\n  SELECT \n    DATE,\n    -- Add other columns here\n    ROW_NUMBER() OVER (\n      PARTITION BY \n        -- Add other columns here\n      ORDER BY \n        DATE\n    ) AS row_num\n  FROM \n    ICEBERG_SCHEMA.MINING_DATA\n)\nSELECT \n  DATE,\n  -- Add other columns here\nFROM \n  clean_records\nWHERE \n  row_num = 1;\n```\n\n### ORDERS Views\n\n```sql\n-- ORDERS views\nCREATE OR REPLACE VIEW ORDERS_duplicate_records AS\nWITH duplicate_records AS (\n  SELECT \n    ORDER_ID,\n    CUSTOMER_ID,\n    ORDER_DATE,\n    TOTAL_AMOUNT,\n    STATUS,\n    LOAD_DATE,\n    ROW_NUMBER() OVER (\n      PARTITION BY \n        ORDER_DATE,\n        TOTAL_AMOUNT,\n        STATUS\n      ORDER BY \n        ORDER_ID\n    ) AS row_num\n  FROM \n    ICEBERG_SCHEMA.ORDERS\n)\nSELECT \n  ORDER_ID,\n  CUSTOMER_ID,\n  ORDER_DATE,\n  TOTAL_AMOUNT,\n  STATUS,\n  LOAD_DATE\nFROM \n  duplicate_records\nWHERE \n  row_num > 1;\n\nCREATE OR REPLACE VIEW ORDERS_clean_view AS\nWITH clean_records AS (\n  SELECT \n    O.ORDER_ID,\n    O.CUSTOMER_ID,\n    O.ORDER_DATE,\n    O.TOTAL_AMOUNT,\n    O.STATUS,\n    O.LOAD_DATE,\n    ROW_NUMBER() OVER (\n      PARTITION BY \n        O.ORDER_DATE,\n        O.TOTAL_AMOUNT,\n        O.STATUS\n      ORDER BY \n        O.ORDER_ID\n    ) AS row_num\n  FROM \n    ICEBERG_SCHEMA.ORDERS O\n  INNER JOIN \n    ICEBERG_SCHEMA.CUSTOMERS C ON O.CUSTOMER_ID = C.CUSTOMER_ID\n)\nSELECT \n  O.ORDER_ID,\n  O.CUSTOMER_ID,\n  O.ORDER_DATE,\n  O.TOTAL_AMOUNT,\n  O.STATUS,\n  O.LOAD_DATE\nFROM \n  clean_records\nWHERE \n  row_num = 1;\n```\n\n### PRODUCTIVITY_DATA Views\n\n```sql\n-- PRODUCTIVITY_DATA views\nCREATE OR REPLACE VIEW PRODUCTIVITY_DATA_duplicate_records AS\nWITH duplicate_records AS (\n  SELECT \n    LOAD_DATE,\n    -- Add other columns here\n    ROW_NUMBER() OVER (\n      PARTITION BY \n        -- Add other columns here\n      ORDER BY \n        LOAD_DATE\n    ) AS row_num\n  FROM \n    ICEBERG_SCHEMA.PRODUCTIVITY_DATA\n)\nSELECT \n  LOAD_DATE,\n  -- Add other columns here\nFROM \n  duplicate_records\nWHERE \n  row_num > 1;\n\nCREATE OR REPLACE VIEW PRODUCTIVITY_DATA_clean_view AS\nWITH clean_records AS (\n  SELECT \n    LOAD_DATE,\n    -- Add other columns here\n    ROW_NUMBER() OVER (\n      PARTITION BY \n        -- Add other columns here\n      ORDER BY \n        LOAD_DATE\n    ) AS row_num\n  FROM \n    ICEBERG_SCHEMA.PRODUCTIVITY_DATA\n)\nSELECT \n  LOAD_DATE,\n  -- Add other columns here\nFROM \n  clean_records\nWHERE \n  row_num = 1;\n```\n\n### PRODUCTS Views\n\n```sql\n-- PRODUCTS views\nCREATE OR REPLACE VIEW PRODUCTS_duplicate_records AS\nWITH duplicate_records AS (\n  SELECT \n    PRODUCT_ID,\n    PRODUCT_NAME,\n    CATEGORY,\n    PRICE,\n    STOCK_QUANTITY,\n    LOAD_DATE,\n    ROW_NUMBER() OVER (\n      PARTITION BY \n        PRODUCT_NAME,\n        CATEGORY,\n        PRICE,\n        STOCK_QUANTITY\n      ORDER BY \n        PRODUCT_ID\n    ) AS row_num\n  FROM \n    ICEBERG_SCHEMA.PRODUCTS\n)\nSELECT \n  PRODUCT_ID,\n  PRODUCT_NAME,\n  CATEGORY,\n  PRICE,\n  STOCK_QUANTITY,\n  LOAD_DATE\nFROM \n  duplicate_records\nWHERE \n  row_num > 1;\n\nCREATE OR REPLACE VIEW PRODUCTS_clean_view AS\nWITH clean_records AS (\n  SELECT \n    PRODUCT_ID,\n    PRODUCT_NAME,\n    CATEGORY,\n    PRICE,\n    STOCK_QUANTITY,\n    LOAD_DATE,\n    ROW_NUMBER() OVER (\n      PARTITION BY \n        PRODUCT_NAME,\n        CATEGORY,\n        PRICE,\n        STOCK_QUANTITY\n      ORDER BY \n        PRODUCT_ID\n    ) AS row_num\n  FROM \n    ICEBERG_SCHEMA.PRODUCTS\n)\nSELECT \n  PRODUCT_ID,\n  PRODUCT_NAME,\n  CATEGORY,\n  PRICE,\n  STOCK_QUANTITY,\n  LOAD_DATE\nFROM \n  clean_records\nWHERE \n  row_num = 1;\n```\n\n### SALES_ICEBERG_TABLE Views\n\n```sql\n-- SALES_ICEBERG_TABLE views\nCREATE OR REPLACE VIEW SALES_ICEBERG_TABLE_duplicate_records AS\nWITH duplicate_records AS (\n  SELECT \n    `ORDER ID`,\n    -- Add other columns here\n    ROW_NUMBER() OVER (\n      PARTITION BY \n        -- Add other columns here\n      ORDER BY \n        `ORDER ID`\n    ) AS row_num\n  FROM \n    ICEBERG_SCHEMA.SALES_ICEBERG_TABLE\n)\nSELECT \n  `ORDER ID`,\n  -- Add other columns here\nFROM \n  duplicate_records\nWHERE \n  row_num > 1;\n\nCREATE OR REPLACE VIEW SALES_ICEBERG_TABLE_clean_view AS\nWITH clean_records AS (\n  SELECT \n    `ORDER ID`,\n    -- Add other columns here,\n    ROW_NUMBER() OVER (\n      PARTITION BY \n        -- Add other columns here\n      ORDER BY \n        `ORDER ID`\n    ) AS row_num\n  FROM \n    ICEBERG_SCHEMA.SALES_ICEBERG_TABLE\n)\nSELECT \n  `ORDER ID`,\n  -- Add other columns here\nFROM \n  clean_records\nWHERE \n  row_num = 1;\n```\n\n### SHIPMENTS Views\n\n```sql\n-- SHIPMENTS views\nCREATE OR REPLACE VIEW SHIPMENTS_duplicate_records AS\nWITH duplicate_records AS (\n  SELECT \n    SHIPMENT_ID,\n    ORDER_ID,\n    SHIPMENT_DATE,\n    CARRIER,\n    TRACKING_NUMBER,\n    LOAD_DATE,\n    ROW_NUMBER() OVER (\n      PARTITION BY \n        SHIPMENT_DATE,\n        CARRIER,\n        TRACKING_NUMBER\n      ORDER BY \n        SHIPMENT_ID\n    ) AS row_num\n  FROM \n    ICEBERG_SCHEMA.SHIPMENTS\n)\nSELECT \n  SHIPMENT_ID,\n  ORDER_ID,\n  SHIPMENT_DATE,\n  CARRIER,\n  TRACKING_NUMBER,\n  LOAD_DATE\nFROM \n  duplicate_records\nWHERE \n  row_num > 1;\n\nCREATE OR REPLACE VIEW SHIPMENTS_clean_view AS\nWITH clean_records AS (\n  SELECT \n    S.SHIPMENT_ID,\n    S.ORDER_ID,\n    S.SHIPMENT_DATE,\n    S.CARRIER,\n    S.TRACKING_NUMBER,\n    S.LOAD_DATE,\n    ROW_NUMBER() OVER (\n      PARTITION BY \n        S.SHIPMENT_DATE,\n        S.CARRIER,\n        S.TRACKING_NUMBER\n      ORDER BY \n        S.SHIPMENT_ID\n    ) AS row_num\n  FROM \n    ICEBERG_SCHEMA.SHIPMENTS S\n  INNER JOIN \n    ICEBERG_SCHEMA.ORDERS O ON S.ORDER_ID = O.ORDER_ID\n)\nSELECT \n  S.SHIPMENT_ID,\n  S.ORDER_ID,\n  S.SHIPMENT_DATE,\n  S.CARRIER,\n  S.TRACKING_NUMBER,\n  S.LOAD_DATE\nFROM \n  clean_records\nWHERE \n  row_num = 1;\n```\n\n### SUPPLIERS Views\n\n```sql\n-- SUPPLIERS views\nCREATE OR REPLACE VIEW SUPPLIERS_duplicate_records AS\nWITH duplicate_records AS (\n  SELECT \n    SUPPLIER_ID,\n    SUPPLIER_NAME,\n    CONTACT_NAME,\n    PHONE,\n    EMAIL,\n    LOAD_DATE,\n    ROW_NUMBER() OVER (\n      PARTITION BY \n        SUPPLIER_NAME,\n        CONTACT_NAME,\n        PHONE,\n        EMAIL\n      ORDER BY \n        SUPPLIER_ID\n    ) AS row_num\n  FROM \n    ICEBERG_SCHEMA.SUPPLIERS\n)\nSELECT \n  SUPPLIER_ID,\n  SUPPLIER_NAME,\n  CONTACT_NAME,\n  PHONE,\n  EMAIL,\n  LOAD_DATE\nFROM \n  duplicate_records\nWHERE \n  row_num > 1;\n\nCREATE OR REPLACE VIEW SUPPLIERS_clean_view AS\nWITH clean_records AS (\n  SELECT \n    SUPPLIER_ID,\n    SUPPLIER_NAME,\n    CONTACT_NAME,\n    PHONE,\n    EMAIL,\n    LOAD_DATE,\n    ROW_NUMBER() OVER (\n      PARTITION BY \n        SUPPLIER_NAME,\n        CONTACT_NAME,\n        PHONE,\n        EMAIL\n      ORDER BY \n        SUPPLIER_ID\n    ) AS row_num\n  FROM \n    ICEBERG_SCHEMA.SUPPLIERS\n)\nSELECT \n  SUPPLIER_ID,\n  SUPPLIER_NAME,\n  CONTACT_NAME,\n  PHONE,\n  EMAIL,\n  LOAD_DATE\nFROM \n  clean_records\nWHERE \n  row_num = 1;\n```\n\n### TUBERCULOSIS_DATA Views\n\n```sql\n-- TUBERCULOSIS_DATA views\nCREATE OR REPLACE VIEW TUBERCULOSIS_DATA_duplicate_records AS\nWITH duplicate_records AS (\n  SELECT \n    COUNTRY_OR_TERRITORY_NAME,\n    YEAR,\n    -- Add other columns here\n    ROW_NUMBER() OVER (\n      PARTITION BY \n        COUNTRY_OR_TERRITORY_NAME,\n        YEAR,\n        -- Add other columns here\n      ORDER BY \n        COUNTRY_OR_TERRITORY_NAME,\n        YEAR\n    ) AS row_num\n  FROM \n    ICEBERG_SCHEMA.TUBERCULOSIS_DATA\n)\nSELECT \n  COUNTRY_OR_TERRITORY_NAME,\n  YEAR,\n  -- Add other columns here\nFROM \n  duplicate_records\nWHERE \n  row_num > 1;\n\nCREATE OR REPLACE VIEW TUBERCULOSIS_DATA_clean_view AS\nWITH clean_records AS (\n  SELECT \n    COUNTRY_OR_TERRITORY_NAME,\n    YEAR,\n    -- Add other columns here,\n    ROW_NUMBER() OVER (\n      PARTITION BY \n        COUNTRY_OR_TERRITORY_NAME,\n        YEAR,\n        -- Add other columns here\n      ORDER BY \n        COUNTRY_OR_TERRITORY_NAME,\n        YEAR\n    ) AS row_num\n  FROM \n    ICEBERG_SCHEMA.TUBERCULOSIS_DATA\n)\nSELECT \n  COUNTRY_OR_TERRITOSRY_NAME,\n  YEAR,\n  -- Add other columns here\nFROM \n  clean_records\nWHERE \n  row_num = 1;\n```\n\nNote: For tables with composite primary keys (like TUBERCULOSIS_DATA), you should include all columns in the `PARTITION BY` clause of the `ROW_NUMBER()` function. For tables with many columns, you should include all columns in the `PARTITION BY` clause of the `ROW_NUMBER()` function, except for the primary key columns. \n\nAdditionally, for tables with foreign key relationships, you should join the related tables in the `clean_view` to ensure referential integrity. \n\nPlease replace `-- Add other columns here` with the actual column names in your tables. \n\nAlso, note that the `CUST` and `CUST_DATA` tables appear to be duplicates, so you may want to consider removing one of them to avoid data inconsistencies. \n\nFinally, the `MINING_DATA` and `PRODUCTIVITY_DATA` tables have primary keys that are dates, so you may want to consider adding additional columns to the `PARTITION BY` clause of the `ROW_NUMBER()` function to avoid false duplicates. \n\nThe `SALES_ICEBERG_TABLE` table has a column named `ORDER ID` which is not a valid column name in Snowflake. You should rename it to a valid column name, such as `ORDER_ID`. \n\nThe `TUBERCULOSIS_DATA` table has a composite primary key, so you should include all columns in the `PARTITION BY` clause of the `ROW_NUMBER()` function. \n\nPlease test the views thoroughly to ensure they are working as expected."
        }
    ],
    "created": 1759913396,
    "model": "snowflake-llama-3.3-70b",
    "usage": {
        "completion_tokens": 4085,
        "prompt_tokens": 1097,
        "total_tokens": 5182
    }
}